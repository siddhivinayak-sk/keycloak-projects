# kubectl create -n istio-ingress secret tls istio-ingress-crt --key=client-private-key.pem --cert=client-certificate.crt
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway-keycloak
  namespace: istio-ingress
spec:
  selector:
    app: istio-ingress
  servers:
  - port:
      number: 443
      name: https-443
      protocol: HTTPS
    hosts:
    - keycloak.acg-digistore.com
    tls:
      mode: SIMPLE
      credentialName: istio-ingress-crt
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - keycloak.acg-digistore.com
  - port:
      number: 82
      name: http2
      protocol: HTTP
    hosts:
    - keycloak.acg-digistore.com
#    tls:
#      httpsRedirect: true
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: keycloak-acg-digistore-com-vs
  namespace: istio-ingress
spec:
  hosts:
  - keycloak.acg-digistore.com
  gateways:
  - istio-ingress/ingress-gateway-keycloak
  - mesh
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        port:
          number: 80
        host: keyclaok-x-keycloak.keycloak.svc.cluster.local
        subset: v1
      weight: 100
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: keycloak-acg-digistore-com-dr
  namespace: istio-ingress
spec:
  host: keyclaok-x-keycloak.keycloak.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
  subsets:
  - name: v1
    labels:
      app.kubernetes.io/component: keycloak
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: ciba-http-ext
spec:
  hosts:
  - ciba.acg-digistore.com
  ports:
  - number: 3001
    name: http
    protocol: HTTP
  resolution: DNS
  location: MESH_EXTERNAL
